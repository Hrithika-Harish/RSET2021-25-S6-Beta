import 'dart:js' as js;
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import 'add_pet_page.dart';
import 'add_reminder.dart';
import 'bloghomepage.dart';
import 'connect.dart';
import 'groominginput.dart';
import 'healthinput.dart';
import 'profile_screen.dart';

class MainScreen extends StatefulWidget {
  @override
  _MainScreenState createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  @override
  void initState() {
    super.initState();
    _checkReminders();
  }

  Future<void> _checkReminders() async {
    User? user = _auth.currentUser;
    if (user == null) return;

    final remindersSnapshot = await _firestore
        .collection('Users')
        .doc(user.uid)
        .collection('Reminders')
        .get();

    final now = DateTime.now();
    for (var doc in remindersSnapshot.docs) {
      var reminder = doc.data();
      Timestamp timestamp = reminder['DateTime'];
      DateTime reminderDate = timestamp.toDate();
      if (now.year == reminderDate.year &&
          now.month == reminderDate.month &&
          now.day == reminderDate.day) {
        _showNotification(reminder['Title'], reminderDate);
      }
    }
  }

  void _showNotification(String title, DateTime date) {
    js.context.callMethod('alert', ["Reminder: $title"]);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('PET CONNECT'),
        leading: IconButton(
          icon: Icon(Icons.menu),
          onPressed: () {
            // Handle menu button press
          },
        ),
        actions: [
          IconButton(
            icon: Icon(Icons.person),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => ProfileScreen()),
              );
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Container(
              height: 250,
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          'Your Pets:',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        IconButton(
                          icon: Icon(Icons.add),
                          onPressed: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => AddPetPage(),
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                    Expanded(
                      child: StreamBuilder<QuerySnapshot>(
                        stream: _firestore
                            .collection('Users')
                            .doc(_auth.currentUser?.uid)
                            .collection('pets')
                            .snapshots(),
                        builder: (context, snapshot) {
                          if (snapshot.connectionState ==
                              ConnectionState.waiting) {
                            return Center(
                              child: CircularProgressIndicator(),
                            );
                          } else if (snapshot.hasError) {
                            return Center(
                              child: Text('Error: ${snapshot.error}'),
                            );
                          } else if (!snapshot.hasData ||
                              snapshot.data!.docs.isEmpty) {
                            return Center(
                              child: Text('No pets found.'),
                            );
                          } else {
                            var pets = snapshot.data!.docs;
                            return ListView.builder(
                              scrollDirection: Axis.horizontal,
                              itemCount: pets.length,
                              itemBuilder: (context, index) {
                                var pet =
                                    pets[index].data() as Map<String, dynamic>;
                                final color = _generateLightColor();
                                return Card(
                                  margin: EdgeInsets.all(8),
                                  color: color,
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(15),
                                  ),
                                  child: Container(
                                    width: 200,
                                    padding: const EdgeInsets.all(16.0),
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        if (pet['ImageUrl'] != null)
                                          ClipRRect(
                                            borderRadius:
                                                BorderRadius.circular(10),
                                            child: Image.network(
                                              pet['ImageUrl'],
                                              height: 100,
                                              width: double.infinity,
                                              fit: BoxFit.cover,
                                            ),
                                          ),
                                        SizedBox(height: 8),
                                        Text(
                                          'Name: ${pet['Name']}',
                                          style: TextStyle(
                                              fontSize: 18,
                                              fontWeight: FontWeight.bold),
                                        ),
                                        SizedBox(height: 8),
                                        Text(
                                          'Age: ${pet['Age']}',
                                          style: TextStyle(fontSize: 16),
                                        ),
                                        SizedBox(height: 8),
                                        Text(
                                          'Gender: ${pet['Gender']}',
                                          style: TextStyle(fontSize: 16),
                                        ),
                                        SizedBox(height: 8),
                                        Text(
                                          'Breed: ${pet['Breed']}',
                                          style: TextStyle(fontSize: 16),
                                        ),
                                      ],
                                    ),
                                  ),
                                );
                              },
                            );
                          }
                        },
                      ),
                    ),
                  ],
                ),
              ),
            ),
            SizedBox(height: 20),
            Expanded(
              child: Container(
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            'Reminders:',
                            style: TextStyle(
                              fontSize: 20,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          IconButton(
                            icon: Icon(Icons.add),
                            onPressed: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => AddReminderPage(),
                                ),
                              );
                            },
                          ),
                        ],
                      ),
                      Expanded(
                        child: StreamBuilder<QuerySnapshot>(
                          stream: _firestore
                              .collection('Users')
                              .doc(_auth.currentUser?.uid)
                              .collection('Reminders')
                              .snapshots(),
                          builder: (context, snapshot) {
                            if (snapshot.connectionState ==
                                ConnectionState.waiting) {
                              return Center(
                                child: CircularProgressIndicator(),
                              );
                            } else if (snapshot.hasError) {
                              return Center(
                                child: Text('Error: ${snapshot.error}'),
                              );
                            } else if (!snapshot.hasData ||
                                snapshot.data!.docs.isEmpty) {
                              return Center(
                                child: Text('No reminders found.'),
                              );
                            } else {
                              var reminders = snapshot.data!.docs;
                              return ListView.builder(
                                itemCount: reminders.length,
                                itemBuilder: (context, index) {
                                  var reminder = reminders[index].data()
                                      as Map<String, dynamic>;
                                  final color = _generateLightColor();
                                  return Card(
                                    margin: EdgeInsets.symmetric(vertical: 4),
                                    color: color,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(15),
                                    ),
                                    child: ListTile(
                                      title: Text(reminder['Title']),
                                      subtitle: Text(DateFormat.yMMMd()
                                          .add_jm()
                                          .format((reminder['DateTime']
                                                  as Timestamp)
                                              .toDate())),
                                      trailing: IconButton(
                                        icon: Icon(Icons.delete),
                                        onPressed: () {
                                          _deleteReminder(reminders[index].id);
                                        },
                                      ),
                                    ),
                                  );
                                },
                              );
                            }
                          },
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                buildButton(
                  context,
                  'assets/pills1.png',
                  'Health',
                  () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => HealthInputScreen()),
                    );
                  },
                ),
                buildButton(
                  context,
                  'assets/scissors1.png',
                  'Grooming',
                  () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => GroomingInputScreen()),
                    );
                  },
                ),
                buildButton(
                  context,
                  'assets/heartnpaw.png',
                  'Connect',
                  () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => Connect()),
                    );
                  },
                ),
                buildButton(
                  context,
                  'assets/blog1.png',
                  'Blog',
                  () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => BlogListScreen()),
                    );
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  void _deleteReminder(String reminderId) async {
    try {
      await _firestore
          .collection('Users')
          .doc(_auth.currentUser?.uid)
          .collection('Reminders')
          .doc(reminderId)
          .delete();
    } catch (e) {
      print('Failed to delete reminder: $e');
    }
  }

  Color _generateLightColor() {
    final Random random = Random();
    final int r = 230 + random.nextInt(25); // Red component
    final int g = 230 + random.nextInt(25); // Green component
    final int b = 230 + random.nextInt(25); // Blue component
    return Color.fromARGB(255, r, g, b);
  }

  Widget buildButton(BuildContext context, String assetPath, String label,
      VoidCallback onPressed) {
    return ElevatedButton(
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.white,
        padding: EdgeInsets.all(20),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
      child: Column(
        children: [
          Image.asset(
            assetPath,
            height: 50,
            width: 50,
          ),
          SizedBox(height: 8),
          Text(
            label,
            style: TextStyle(
              color: Colors.black,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }
}
